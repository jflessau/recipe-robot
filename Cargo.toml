[package]
name = "listoplate"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
reqwest = { version = "0.12.2", default-features = false, features = [
  "rustls-tls",
  "json",
] }
axum = { version = "0.7", optional = true }
console_log = "1.0"
console_error_panic_hook = "0.1"
leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
tower = { version = "0.4", optional = true, features = ["util"] }
tower-http = { version = "0.5", features = [
  "fs",
  "trace",
  "cors",
  "timeout",
], optional = true }
wasm-bindgen = "=0.2.95"
thiserror = "1"
anyhow = "1.0.79"
log = "0.4.14"
leptos_icons = "0.3.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
serde = { version = "1.0.130", features = ["derive"] }
serde_json = "1.0.64"
icondata = "0.5.0"
http = "1"
openai = { version = "1.0.0-alpha.16", default-features = false, features = [
  "rustls",
], optional = true }
uuid = { version = "1.11", features = ["serde", "v4"] }
jsonwebtoken = { version = "9.3.0", optional = true }
regex = "1.11.1"
axum-extra = { version = "0.9.6", features = ["cookie"], optional = true }
chrono = { version = "0.4.38", features = ["serde"], optional = true }
surrealdb = { version = "2.1.2", optional = true }
surrealdb-migrations = { version = "2.0.0", optional = true }
dotenv = { version = "0.15.0", optional = true }
rand = "0.8.5"
bcrypt = "0.16.0"
random_name_generator = "0.3.6"


[features]
ssr = [
  "dep:axum",
  "dep:axum-extra",
  "dep:tokio",
  "dep:tower",
  "dep:tower-http",
  "dep:leptos_axum",
  "dep:dotenv",
  "dep:openai",
  "dep:jsonwebtoken",
  "dep:chrono",
  "dep:surrealdb",
  "dep:surrealdb-migrations",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "listoplate"

# The site root folder is where cargo-leptos generate all output.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3002"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"

# The tailwind config file.
#
# Optional, defaults to "tailwind.config.js" which if is not present
# is generated for you
tailwind-config-file = "tailwind.config.js"
dotenv = { version = "0.15.0" }
http = "1"
leptos_icons = "0.3.1"
console_log = "1.0.0"
log = "0.4.22"
icondata = "0.4.0"
serde = { version = "1.0.215", features = ["derive"] }
serde_json = { version = "1.0.133" }
reqwest = { version = "0.12.2", default-features = false, features = [
  "rustls-tls",
  "json",
] }
